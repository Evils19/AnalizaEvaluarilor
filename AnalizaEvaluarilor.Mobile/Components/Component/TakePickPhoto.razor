@using AnalizaEvaluarilor.Mobile.Service
@using MudBlazor
@inject CameraService CameraService



<div class="@($"my-nav-menu{(activeNav ? "-active" : $"{strgService}")}")">
    <MudBlazorNav/>
</div>






<div class="Newnavbar">

    <div class="border @isActive[0]" @onclick="() => Meniu()">
        <MudIcon Icon="@Icons.Material.Filled.List">

        </MudIcon>
    </div>
    <div class="border @isActive[1]" @onclick="() => Add()">
        <MudIcon Icon="@Icons.Material.Filled.Add"
        >

        </MudIcon>
    </div>

    <div class="border @isActive[2]" @onclick="() => Photo()">
        <MudIcon Icon="@Icons.Material.Filled.Photo">

        </MudIcon>
    </div>

</div>


@code {
    private FileResult? photo;
    private string? publicPath;
    private bool activeNav = false;
    private string strgService;

    [Parameter] public EventCallback OnCancel { get; set; }

    [Parameter] public EventCallback<string> OnPhotoSelected { get; set; }

    private string[] isActive;
    
    
    protected override async Task OnInitializedAsync()
    {
        isActive = new string[3];
        await InvokeAsync(StateHasChanged);
    }

    public async Task Add()
    {
        isActive = Enumerable.Range(0, isActive.Length)
            .Select(i => i == 1 ? "active" : "")
            .ToArray();
        Console.WriteLine("Test");
        await InvokeAsync(StateHasChanged);


        try
        {
            photo = await CameraService.CapturePhotoAync();
            if (photo != null)
            {
                await SaveAndDisplayPhoto(photo);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

        isActive = new string[3];
        await InvokeAsync(StateHasChanged);
    }

    public async Task Photo()
    {
        isActive = Enumerable.Range(0, isActive.Length)
            .Select(i => i == 2 ? "active" : "")
            .ToArray();
        Console.WriteLine("Test");
        await InvokeAsync(StateHasChanged);


        try
        {
            photo = await CameraService.PickPhotoAsync();
            if (photo != null)
            {
                await SaveAndDisplayPhoto(photo);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

        isActive = new string[3];
        await InvokeAsync(StateHasChanged);
    }

    public async Task Meniu()
    {
        isActive = Enumerable.Range(0, isActive.Length)
            .Select(i => i == 0 ? "active" : "")
            .ToArray(); 
        await InvokeAsync(StateHasChanged);
        activeNav=!activeNav;
        strgService= activeNav ? "" : "-inactive";
        await InvokeAsync(StateHasChanged);
        
        await Task.Delay(400);
        isActive = new string[3];
        await InvokeAsync(StateHasChanged);
        

    }


    private async Task SaveAndDisplayPhoto(FileResult photo)
    {
        var fileName = photo.FileName;
        var savePath = Path.Combine("wwwroot", "img", fileName);
        var publicPathTemp = $"/img/{fileName}";

        try
        {
            if (!Directory.Exists("wwwroot/img"))
            {
                Directory.CreateDirectory("wwwroot/img");
            }

            using var stream = await photo.OpenReadAsync();
            using var fileStream = File.Create(savePath);
            await stream.CopyToAsync(fileStream);

            publicPath = publicPathTemp;
            await OnPhotoSelected.InvokeAsync(publicPath);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Eroare la salvarea imaginii: {ex.Message}");
        }
    }

}