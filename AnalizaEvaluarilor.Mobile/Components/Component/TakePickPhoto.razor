@using AnalizaEvaluarilor.Mobile.Service
@inject CameraService CameraService
@inject IJSRuntime JSRuntime



<div class="sc-bottom-bar">
    <a class="sc-menu-item">
        <i class="fas fa-list"></i>

    </a>
    <a class="sc-menu-item sc-current">
        <i class="fas fa-plus"></i>
    </a>
    <a class="sc-nav-indicator">
    </a>
    <a class="sc-menu-item">
        <i class="fas fa-calendar-alt"></i>
    </a>
</div>

@code {
    private FileResult? photo;
    private string? publicPath;

    [Parameter] public EventCallback OnCancel { get; set; }

    [Parameter] public EventCallback<string> OnPhotoSelected { get; set; }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {

            await JSRuntime.InvokeVoidAsync("initializeMenu");

        }
    }

    public async Task TakePhoto()
    {
        try
        {
            photo = await CameraService.CapturePhotoAync();
            if (photo != null)
            {
                await SaveAndDisplayPhoto(photo);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    public async Task PickPhoto()
    {
        try
        {
            photo = await CameraService.PickPhotoAsync();
            if (photo != null)
            {
                await SaveAndDisplayPhoto(photo);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task SaveAndDisplayPhoto(FileResult photo)
    {
        var fileName = photo.FileName;
        var savePath = Path.Combine("wwwroot", "img", fileName);
        var publicPathTemp = $"/img/{fileName}";

        try
        {
            if (!Directory.Exists("wwwroot/img"))
            {
                Directory.CreateDirectory("wwwroot/img");
            }

            using var stream = await photo.OpenReadAsync();
            using var fileStream = File.Create(savePath);
            await stream.CopyToAsync(fileStream);

            publicPath = publicPathTemp;
            await OnPhotoSelected.InvokeAsync(publicPath);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Eroare la salvarea imaginii: {ex.Message}");
        }
    }

}